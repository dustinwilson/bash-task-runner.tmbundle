<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/local/bin/bash
PATH="/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:$PATH"

# If this isn't being run from within a project directory, fail.
if [ -z ${TM_PROJECT_DIRECTORY+x} ]; then
    echo "FAIL: Bash Task Runner must be run from a Textmate project."
    exit 206 # Show Tooltip
fi

# If the bash runner script filename isn't specified then set it to the default.
if [ -z ${TM_BASH_RUNNER_SCRIPTNAME+x} ]; then
    TM_BASH_RUNNER_SCRIPTNAME="runnerfile.sh"
fi

# If a bash runner script doesn't exist, fail.
if [ ! -f "${TM_PROJECT_DIRECTORY}/${TM_BASH_RUNNER_SCRIPTNAME}" ]; then
    echo "FAIL: Project directory does not have a bash runner script."
    exit 206 # Show Tooltip
fi

cd $TM_PROJECT_DIRECTORY

# If Bash Task Runner isn't installed, fail.
if [ ! -d "node_modules/bash-task-runner" ]; then
    echo "FAIL: Bash Task Runner isn't installed as a local node module."
    exit 206 # Show Tooltip
fi

# Create the plist data for the task selection dialog.
dialogPlist='{ title = "Bash Task Runner"; prompt = "Pick a task from the list below:"; items = ('
filesList=$(./node_modules/.bin/runner -l)

# If default is among the list of items add it first to the items in the plist then remove it from the list.
if [ -n $(pcregrep -M 'default\n' &lt;&lt;&lt; "$filesList") ]; then
    dialogPlist="$dialogPlist \"default\", "
    filesList=${filesList/$'default\n'/}
fi

# Sort the remaining items alphabetically then add them to the plist.
while read -r line; do
    dialogPlist="$dialogPlist \"$line\", "
done &lt;&lt;&lt; "$(sort &lt;&lt;&lt; "$filesList")"

# Show a dialog and parse the output to a string to get the task name.
task=$($DIALOG -cm -p "${dialogPlist}); }" "${TM_SUPPORT_PATH}/nibs/RequestItem.nib" | xmllint --xpath 'string(/plist/dict/dict/array/string)' -)

# If the task is empty cancel was pressed, so exit.
if [ "x$task" = "x" ]; then
    exit 206
fi

./node_modules/.bin/runner --directory="${TM_PROJECT_DIRECTORY}" $task
exit 206
</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^R</string>
	<key>name</key>
	<string>Run task...</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>uuid</key>
	<string>A139435A-C28C-4323-AD5E-1DB242B13A1A</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
